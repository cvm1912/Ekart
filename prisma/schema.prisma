// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OTPPurpose {
  SIGNUP
  LOGIN
  PASSWORD_RESET
  VERIFY_PHONE
  VERIFY_EMAIL
}


model User {
  id             String         @id @default(cuid())
  email          String?        @unique
  phone          String?        @unique
  passwordHash   String?
  name           String?
  role           Role           @default(BUYER)
  isPhoneVerified Boolean       @default(false)
  isEmailVerified Boolean       @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  otps           OTP[]
  socialAccounts SocialAccount[]
  refreshTokens  RefreshToken[]
}


model OTP {
  id        String     @id @default(cuid())
  target    String     // phone or email
  codeHash  String
  purpose   OTPPurpose
  expiresAt DateTime
  attempts  Int        @default(0)
  consumed  Boolean    @default(false)
  createdAt DateTime   @default(now())

  userId String?
  user   User?        @relation(fields: [userId], references: [id])
}

model SocialAccount {
  id         String   @id @default(cuid())
  provider   String   // google, facebook
  providerId String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  tokenHash String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
}


model Location {
  id        String   @id @default(uuid()) // Unique ID
  name      String   // Name of the location (e.g. "Delhi Office")
  latitude  Float    // Latitude (e.g. 28.6139)
  longitude Float    // Longitude (e.g. 77.2090)
  createdAt DateTime @default(now())
}